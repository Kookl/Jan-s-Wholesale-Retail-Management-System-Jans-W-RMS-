Index: Project/Jans-Wholesale-RMS-Server/src/Server/Server.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Server;\r\n\r\nimport Domain.*;\r\nimport format.Address;\r\nimport org.apache.logging.log4j.LogManager;\r\nimport org.apache.logging.log4j.Logger;\r\n\r\nimport javax.swing.*;\r\nimport java.io.EOFException;\r\nimport java.io.IOException;\r\nimport java.io.ObjectInputStream;\r\nimport java.io.ObjectOutputStream;\r\nimport java.net.*;\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\nimport java.util.Vector;\r\n\r\npublic class Server {\r\n    private ObjectOutputStream objOs;\r\n    private ObjectInputStream objIs;\r\n    private ServerSocket serverSocket;\r\n    private Socket connectionSocket;\r\n    private static Connection dBConn = null;\r\n    private Statement stmt;\r\n    private ResultSet result = null;\r\n\r\n    private static Logger logger = LogManager.getLogger(Server.class);\r\n\r\n    public Server(){\r\n        this.createConnection();\r\n        this.waitForRequest();\r\n    }\r\n\r\n    private void createConnection() {\r\n        try {\r\n            serverSocket = new ServerSocket(8888);\r\n        } catch (IOException ex){\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void waitForRequest(){\r\n        String action = \"\";\r\n        getDatabaseConnection();\r\n        String id = \"\";\r\n\r\n        Customer customer = null;\r\n        Invoice invoice = null;\r\n        Products product = null;\r\n        Staff staff = null;\r\n\r\n        Vector<Customer> customerList = new Vector<>();\r\n        Vector<Invoice> invoiceList = new Vector<>();\r\n        Vector<Products> productList = new Vector<>();\r\n        Vector<Staff> staffList = new Vector<>();\r\n\r\n        try{\r\n            while (true) {\r\n                connectionSocket = serverSocket.accept();\r\n                this.configureStreams();\r\n                try {\r\n                    action = (String) objIs.readObject();\r\n                    switch (action) {\r\n                        case \"Add Customer\" -> {\r\n                            customer = (Customer) objIs.readObject();\r\n                            insertIntoCustomer(customer);\r\n                            objOs.writeObject(true);\r\n                        }\r\n                        case \"Update Customer\" -> {\r\n                            id = (String) objIs.readObject();\r\n                            customer = (Customer) objIs.readObject();\r\n                            updateCustomer(id, customer);\r\n                            objOs.writeObject(true);\r\n                        }\r\n                        case \"Delete Customer\" -> {\r\n                            id = (String) objIs.readObject();\r\n                            deleteCustomer(id);\r\n                            objOs.writeObject(true);\r\n                        }\r\n                        case \"Find Customer\" -> {\r\n                            id = (String) objIs.readObject();\r\n                            customer = findCustomerById(id);\r\n                            objOs.writeObject(customer);\r\n                        }\r\n                        case \"List Customers\" -> {\r\n                            customerList = showCustomers();\r\n                            objOs.writeObject(customerList);\r\n                        }\r\n                        case \"Add Invoice\" -> {\r\n                            invoice = (Invoice) objIs.readObject();\r\n                            insertIntoInvoices(invoice);\r\n                            objOs.writeObject(true);\r\n                        }\r\n                        case \"Find Invoice\" -> {\r\n                            id = (String) objIs.readObject();\r\n                            invoice = findInvoiceById(id);\r\n                            objOs.writeObject(invoice);\r\n                        }\r\n                        case \"List Invoices\" -> {\r\n                            invoiceList = showInvoices();\r\n                            objOs.writeObject(invoiceList);\r\n                        }\r\n                        case \"Add Product\" -> {\r\n                            product = (Products) objIs.readObject();\r\n                            insertIntoInventory(product);\r\n                            objOs.writeObject(true);\r\n                        }\r\n                        case \"Update Product\" -> {\r\n                            id = (String) objIs.readObject();\r\n                            product = (Products) objIs.readObject();\r\n                            updateProduct(id, product);\r\n                            objOs.writeObject(true);\r\n                        }\r\n                        case \"Delete Product\" -> {\r\n                            id = (String) objIs.readObject();\r\n                            deleteProduct(id);\r\n                            objOs.writeObject(true);\r\n                        }\r\n                        case \"Find Product\" -> {\r\n                            id = (String) objIs.readObject();\r\n                            product = findProductById(id);\r\n                            objOs.writeObject(product);\r\n                        }\r\n                        case \"List Products\" -> {\r\n                            productList = showInventory();\r\n                            objOs.writeObject(productList);\r\n                        }\r\n                        case \"Add Staff\" -> {\r\n                            staff = (Staff) objIs.readObject();\r\n                            insertIntoStaff(staff);\r\n                            objOs.writeObject(true);\r\n                        }\r\n                        case \"Update Staff\" -> {\r\n                            id = (String) objIs.readObject();\r\n                            staff = (Staff) objIs.readObject();\r\n                            updateStaff(id, staff);\r\n                            objOs.writeObject(true);\r\n                        }\r\n                        case \"Delete Staff\" -> {\r\n                            id = (String) objIs.readObject();\r\n                            deleteStaff(id);\r\n                            objOs.writeObject(true);\r\n                        }\r\n                        case \"Find Staff\" -> {\r\n                            id = (String) objIs.readObject();\r\n                            staff = findStaffById(id);\r\n                            objOs.writeObject(staff);\r\n                        }\r\n                        case \"List Staff\" -> {\r\n                            staffList = showStaff();\r\n                            objOs.writeObject(staffList);\r\n                        }\r\n                    }\r\n                } catch (ClassNotFoundException | ClassCastException ex){\r\n                    ex.printStackTrace();\r\n                }\r\n                this.closeConnection();\r\n            }\r\n        } catch (EOFException ex){\r\n            System.out.println(\"Client has terminated connections with the server\");\r\n            ex.printStackTrace();\r\n        }catch (IOException ex){\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void configureStreams(){\r\n        try {\r\n            objOs = new ObjectOutputStream(connectionSocket.getOutputStream());\r\n            objIs = new ObjectInputStream(connectionSocket.getInputStream());\r\n        } catch (IOException ex){\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private static Connection getDatabaseConnection() {\r\n        if(dBConn == null){\r\n            try {\r\n                String url = \"jdbc:mysql://localhost:3306/jans\";\r\n                dBConn = DriverManager.getConnection(url, \"root\", \"admin\");\r\n                JOptionPane.showMessageDialog(null, \"Database Connection Successful\", \"CONNECTION STATUS\", JOptionPane.INFORMATION_MESSAGE);\r\n            } catch (SQLException ex){\r\n                JOptionPane.showMessageDialog(null, \"Could not connect to database\", \"CONNECTION FAILURE\", JOptionPane.ERROR_MESSAGE);\r\n            }\r\n        }\r\n        return dBConn;\r\n    }\r\n\r\n    private void closeConnection(){\r\n        try {\r\n            objOs.close();\r\n            objIs.close();\r\n            connectionSocket.close();\r\n        } catch (IOException ex){\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n\r\n    // CUSTOMER ACTIONS\r\n    public void insertIntoCustomer(Customer cus){\r\n        String cusUrl = \"INSERT INTO customer (CustomerID,Name,DOB,Telephone,EmailAddress,DateOfMembership,MembershipExpiryDate) \" +\r\n                \"VALUES ('\"+cus.getCusID()+\"','\"+cus.getCusName()+\"','\"+cus.getDob()+\"','\"+cus.getTelephone()+\"','\"+cus.getEmail()+\"',\" +\r\n                \"'\"+cus.getDateOfMembership()+\"','\"+cus.getDateOfMembershipExp()+\"')\";\r\n        String addressUrl = \"Insert into address (CustomerID,Street,Town,Parish) VALUES ('\"+cus.getCusID()+\"','\" +\r\n                \"\"+cus.getAddress().getStreet()+\"','\"+cus.getAddress().getTown()+\"','\"+cus.getAddress().getParish()+\"')\";\r\n        try {\r\n            stmt = dBConn.createStatement();\r\n\r\n            if(stmt.executeUpdate(cusUrl) == 1 && stmt.executeUpdate(addressUrl) == 1){\r\n                objOs.writeObject(true);\r\n                logger.info(\"Customer added to the database\");\r\n            }\r\n            else\r\n                objOs.writeObject(false);\r\n        } catch (IOException | SQLException ex){\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void deleteCustomer(String id){\r\n        String query = \"DELETE FROM customer WHERE CustomerID = '\" + id + \"'\";\r\n        try {\r\n            stmt = dBConn.createStatement();\r\n            if(stmt.executeUpdate(query) == 1)\r\n                objOs.writeObject(true);\r\n            else\r\n                objOs.writeObject(false);\r\n        } catch (IOException | SQLException ex){\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public Customer findCustomerById(String id){\r\n        Customer customer = new Customer();\r\n        String query = \"SELECT * FROM customer WHERE CustomerID = '\" + id + \"'\";\r\n        String addQuery = \"SELECT * FROM address WHERE CustomerID = '\" + id + \"'\";\r\n        try{\r\n            stmt = dBConn.createStatement();\r\n            result = stmt.executeQuery(query);\r\n            if (result.next()){\r\n                customer.setCusID(result.getString(\"CustomerID\"));\r\n                customer.setCusName(result.getString(\"Name\"));\r\n                customer.setDob(result.getString(\"DOB\"));\r\n                customer.setTelephone(result.getString(\"Telephone\"));\r\n                customer.setEmail(result.getString(\"EmailAddress\"));\r\n                customer.setDateOfMembership(result.getString(\"DateOfMembership\"));\r\n                customer.setGetDateOfMembershipExp(result.getString(\"MembershipExpiryDate\"));\r\n            }\r\n            result = stmt.executeQuery(addQuery);\r\n            if (result.next()){\r\n                customer.getAddress().setStreet(result.getString(\"Street\"));\r\n                customer.getAddress().setCity(result.getString(\"Town\"));\r\n                customer.getAddress().setParish(result.getString(\"Parish\"));\r\n            }\r\n        } catch (SQLException ex){\r\n            ex.printStackTrace();\r\n        }\r\n        return customer;\r\n    }\r\n\r\n    public void updateCustomer(String id, Customer customer){\r\n        String url = \"UPDATE customer SET Name = '\"+customer.getCusName()+\"', DOB = '\"+customer.getDob()+\"', Telephone = '\"+customer.getTelephone()+\"'\" +\r\n                \", EmailAddress = '\"+customer.getEmail()+\"' WHERE CustomerID = '\" + id + \"'\";\r\n        String addUrl = \"UPDATE address SET Street = '\"+customer.getAddress().getStreet()+\"', Town = '\"+customer.getAddress().getTown()+\"',\" +\r\n                \" Parish = '\"+customer.getAddress().getParish()+\"' WHERE CustomerID = '\" + id + \"'\";\r\n        try {\r\n            stmt = dBConn.createStatement();\r\n            if(stmt.executeUpdate(url) == 1 && stmt.executeUpdate(addUrl) == 1){\r\n                objOs.writeObject(true);\r\n                logger.info(\"Customer updated in the database\");\r\n            }\r\n            else\r\n                objOs.writeObject(false);\r\n        } catch (IOException | SQLException ex){\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public Vector<Customer> showCustomers(){\r\n        Vector<Customer> customerList = new Vector<>();\r\n        Customer customer = new Customer();\r\n        String query = \"SELECT * FROM customer\";\r\n        String query2 = \"SELECT * FROM address\";\r\n        try{\r\n            stmt = dBConn.createStatement();\r\n            Statement secondStmt = dBConn.createStatement();\r\n            result = stmt.executeQuery(query);\r\n            ResultSet secondResult = secondStmt.executeQuery(query2);\r\n            while (result.next() && secondResult.next()){\r\n                customer.setCusID(result.getString(\"CustomerID\"));\r\n                customer.setCusName(result.getString(\"Name\"));\r\n                customer.setDob(result.getString(\"DOB\"));\r\n                customer.setTelephone(result.getString(\"Telephone\"));\r\n                customer.setEmail(result.getString(\"EmailAddress\"));\r\n                customer.setDateOfMembership(result.getString(\"DateOfMembership\"));\r\n                customer.setGetDateOfMembershipExp(result.getString(\"MembershipExpiryDate\"));\r\n\r\n                customer.getAddress().setStreet(secondResult.getString(\"Street\"));\r\n                customer.getAddress().setCity(secondResult.getString(\"Town\"));\r\n                customer.getAddress().setParish(secondResult.getString(\"Parish\"));\r\n\r\n                customerList.add(customer);\r\n                customer = new Customer();\r\n            }\r\n        } catch (SQLException ex){\r\n            ex.printStackTrace();\r\n        }\r\n        return customerList;\r\n    }\r\n\r\n    // INVENTORY ACTIONS\r\n    public void insertIntoInventory(Products pro){\r\n        String url = \"INSERT INTO inventory Values ('\"+pro.getProdCode()+\"','\"+pro.getProdName()+\"','\"+pro.getProdShortDesc()+\"','\" +\r\n                \"\"+pro.getProdLongDesc()+\"','\"+pro.getProdStock()+\"','\"+pro.getUnitPrice()+\"')\";\r\n        try {\r\n            stmt = dBConn.createStatement();\r\n\r\n            if(stmt.executeUpdate(url) == 1){\r\n                objOs.writeObject(true);\r\n                logger.info(\"Product added to the database\");\r\n            }\r\n            else\r\n                objOs.writeObject(false);\r\n        } catch (IOException | SQLException ex){\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void updateProduct(String id, Products product){\r\n        String url = \"UPDATE customer SET Name = '\"+product.getProdName()+\"', ShortDesc = '\"+product.getProdShortDesc()+\"', \" +\r\n                \"LongDesc = '\"+product.getProdLongDesc()+\"'\" + \", ItemsInStock = '\"+product.getProdStock()+\"', \" +\r\n                \"UnitPrice = '\"+product.getUnitPrice()+\"' WHERE CustomerID = '\" + id + \"'\";\r\n        try {\r\n            stmt = dBConn.createStatement();\r\n            if(stmt.executeUpdate(url) == 1){\r\n                objOs.writeObject(true);\r\n                logger.info(\"Product updated in the database\");\r\n            }\r\n            else\r\n                objOs.writeObject(false);\r\n        } catch (IOException | SQLException ex){\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void deleteProduct(String id){\r\n        String query = \"DELETE FROM inventory WHERE ProductCode = '\" + id + \"'\";\r\n        try {\r\n            stmt = dBConn.createStatement();\r\n            if(stmt.executeUpdate(query) == 1)\r\n                objOs.writeObject(true);\r\n            else\r\n                objOs.writeObject(false);\r\n        } catch (IOException | SQLException ex){\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public Products findProductById(String id){\r\n        Products product = new Products();\r\n        String query = \"SELECT * FROM inventory WHERE ProductCode = '\" + id  + \"'\";\r\n        try{\r\n            stmt = dBConn.createStatement();\r\n            result = stmt.executeQuery(query);\r\n            if (result.next()){\r\n                product.setProdCode(result.getString(\"ProductCode\"));\r\n                product.setProdName(result.getString(\"Name\"));\r\n                product.setProdShortDesc(result.getString(\"ShortDesc\"));\r\n                product.setProdLongDesc(result.getString(\"LongDesc\"));\r\n                product.setProdStock(result.getInt(\"ItemsInStock\"));\r\n                product.setUnitPrice(result.getFloat(\"UnitPrice\"));\r\n            }\r\n        } catch (SQLException ex){\r\n            ex.printStackTrace();\r\n        }\r\n        return product;\r\n    }\r\n\r\n    public Vector<Products> showInventory(){\r\n        Vector<Products> inventory = new Vector<>();\r\n        Products product = new Products();\r\n        String query = \"SELECT * FROM inventory\";\r\n        try{\r\n            stmt = dBConn.createStatement();\r\n            result = stmt.executeQuery(query);\r\n            while (result.next()){\r\n                product.setProdCode(result.getString(\"ProductCode\"));\r\n                product.setProdName(result.getString(\"Name\"));\r\n                product.setProdShortDesc(result.getString(\"ShortDesc\"));\r\n                product.setProdLongDesc(result.getString(\"LongDesc\"));\r\n                product.setProdStock(result.getInt(\"ItemsInStock\"));\r\n                product.setUnitPrice(result.getFloat(\"UnitPrice\"));\r\n\r\n                inventory.add(product);\r\n                product = new Products();\r\n            }\r\n        } catch (SQLException ex){\r\n            ex.printStackTrace();\r\n        }\r\n        return inventory;\r\n    }\r\n\r\n    // STAFF ACTIONS\r\n    public void insertIntoStaff(Staff staff){\r\n        String url = \"INSERT INTO Staff Values ('\"+staff.getStaffID()+\"','\"+staff.getName()+\"','\"+staff.getPosition()+\"','\" +\r\n                \"\"+staff.getDepartment()+\"','\"+staff.getDateOfBirth().toString()+\"')\";\r\n        try {\r\n            stmt = dBConn.createStatement();\r\n\r\n            if(stmt.executeUpdate(url) == 1){\r\n                objOs.writeObject(true);\r\n                logger.info(\"Staff added to the database\");\r\n            }\r\n            else\r\n                objOs.writeObject(false);\r\n        } catch (IOException | SQLException ex){\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void updateStaff(String id, Staff staff){\r\n        String url = \"UPDATE customer SET Name = '\"+staff.getName()+\"', Position = '\"+staff.getPosition()+\"', \" +\r\n                \"Department = '\"+staff.getDepartment()+\"'\" + \", DOB = '\"+staff.getDateOfBirth()+\r\n                \"' WHERE CustomerID = '\" + id + \"'\";\r\n        try {\r\n            stmt = dBConn.createStatement();\r\n            if(stmt.executeUpdate(url) == 1){\r\n                objOs.writeObject(true);\r\n                logger.info(\"Staff updated in the database\");\r\n            }\r\n            else\r\n                objOs.writeObject(false);\r\n        } catch (IOException | SQLException ex){\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void deleteStaff(String id){\r\n        String query = \"DELETE FROM staff WHERE StaffID = '\" + id + \"'\";\r\n        try {\r\n            stmt = dBConn.createStatement();\r\n            if(stmt.executeUpdate(query) == 1)\r\n                objOs.writeObject(true);\r\n            else\r\n                objOs.writeObject(false);\r\n        } catch (IOException | SQLException ex){\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public Staff findStaffById(String id){\r\n        Staff staff = new Staff();\r\n        String query = \"SELECT * FROM staff WHERE StaffID = '\" + id + \"'\";\r\n        try{\r\n            stmt = dBConn.createStatement();\r\n            result = stmt.executeQuery(query);\r\n            if (result.next()){\r\n                staff.setStaffID(result.getString(\"StaffID\"));\r\n                staff.setName(result.getString(\"Name\"));\r\n                staff.setPosition(result.getString(\"Position\"));\r\n                staff.setDepartment(result.getString(\"Department\"));\r\n                staff.setDateOfBirth(result.getString(\"DOB\"));\r\n            }\r\n        } catch (SQLException ex){\r\n            ex.printStackTrace();\r\n        }\r\n        return staff;\r\n    }\r\n\r\n    public Vector<Staff> showStaff() {\r\n        Vector<Staff> staffList = new Vector<>();\r\n        Staff staff = new Staff();\r\n        String query = \"SELECT * FROM staff\";\r\n        try {\r\n            stmt = dBConn.createStatement();\r\n            result = stmt.executeQuery(query);\r\n            while (result.next()) {\r\n                staff.setStaffID(result.getString(\"StaffID\"));\r\n                staff.setName(result.getString(\"Name\"));\r\n                staff.setPosition(result.getString(\"Position\"));\r\n                staff.setDepartment(result.getString(\"Department\"));\r\n                staff.setDateOfBirth(result.getString(\"DOB\"));\r\n\r\n                staffList.add(staff);\r\n                staff = new Staff();\r\n            }\r\n        } catch (SQLException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n        return staffList;\r\n    }\r\n\r\n    // INVOICE ACTIONS\r\n    public void insertIntoInvoices(Invoice invoice){\r\n        String url = \"INSERT INTO Invoice Values ('\" + invoice.getInvoiceNo() + \"','\" + invoice.getBillingDate() + \"','\" +\r\n                invoice.getItem() + \"','\" + invoice.getQuantity() + \"','\" + invoice.getCashierName() + \"','\" + invoice.getCustomerName() + \"')\";\r\n        try {\r\n            stmt = dBConn.createStatement();\r\n\r\n            if(stmt.executeUpdate(url) == 1){\r\n                objOs.writeObject(true);\r\n                logger.info(\"Invoice added to the database\");\r\n            }\r\n            else\r\n                objOs.writeObject(false);\r\n        } catch (IOException | SQLException ex){\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public Invoice findInvoiceById(String id){\r\n        Invoice invoice = new Invoice();\r\n        String query = \"SELECT * FROM invoice WHERE InvoiceNumber = \" + id;\r\n        try{\r\n            stmt = dBConn.createStatement();\r\n            result = stmt.executeQuery(query);\r\n            if (result.next()){\r\n                invoice.setInvoiceNo(result.getInt(\"InvoiceNumber\"));\r\n                invoice.setBillingDate(result.getString(\"BillingDate\"));\r\n                invoice.setItem(result.getString(\"Item\"));\r\n                invoice.setQuantity(result.getInt(\"Quantity\"));\r\n                invoice.setCashierName(result.getString(\"Cashier\"));\r\n                invoice.setCustomerName(result.getString(\"Customer\"));\r\n            }\r\n        } catch (SQLException ex){\r\n            ex.printStackTrace();\r\n        }\r\n        return invoice;\r\n    }\r\n\r\n    public Vector<Invoice> showInvoices() {\r\n        Vector<Invoice> invoiceList = new Vector<>();\r\n        Invoice invoice = new Invoice();\r\n        String query = \"SELECT * FROM invoice\";\r\n        try {\r\n            stmt = dBConn.createStatement();\r\n            result = stmt.executeQuery(query);\r\n            while (result.next()) {\r\n                invoice.setInvoiceNo(result.getInt(\"InvoiceNumber\"));\r\n                invoice.setBillingDate(result.getString(\"BillingDate\"));\r\n                invoice.setItem(result.getString(\"Item\"));\r\n                invoice.setQuantity(result.getInt(\"Quantity\"));\r\n                invoice.setCashierName(result.getString(\"Cashier\"));\r\n                invoice.setCustomerName(result.getString(\"Customer\"));\r\n\r\n                invoiceList.add(invoice);\r\n                invoice = new Invoice();\r\n            }\r\n        } catch (SQLException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n        return invoiceList;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project/Jans-Wholesale-RMS-Server/src/Server/Server.java b/Project/Jans-Wholesale-RMS-Server/src/Server/Server.java
--- a/Project/Jans-Wholesale-RMS-Server/src/Server/Server.java	(revision 3312c5e66f2aaa8298f3b926ae0c58cdfb78c177)
+++ b/Project/Jans-Wholesale-RMS-Server/src/Server/Server.java	(date 1668392725058)
@@ -282,22 +282,22 @@
         String query = "SELECT * FROM customer";
         String query2 = "SELECT * FROM address";
         try{
-            stmt = dBConn.createStatement();
-            Statement secondStmt = dBConn.createStatement();
-            result = stmt.executeQuery(query);
-            ResultSet secondResult = secondStmt.executeQuery(query2);
-            while (result.next() && secondResult.next()){
-                customer.setCusID(result.getString("CustomerID"));
-                customer.setCusName(result.getString("Name"));
-                customer.setDob(result.getString("DOB"));
-                customer.setTelephone(result.getString("Telephone"));
-                customer.setEmail(result.getString("EmailAddress"));
-                customer.setDateOfMembership(result.getString("DateOfMembership"));
-                customer.setGetDateOfMembershipExp(result.getString("MembershipExpiryDate"));
+            PreparedStatement ps = dBConn.prepareStatement(query);
+            PreparedStatement ps2 = dBConn.prepareStatement(query2);
+            ResultSet rs = ps.executeQuery();
+            ResultSet rs2 = ps2.executeQuery();
+            while (rs.next() && rs2.next()){
+                customer.setCusID(rs.getString("CustomerID"));
+                customer.setCusName(rs.getString("Name"));
+                customer.setDob(rs.getString("DOB"));
+                customer.setTelephone(rs.getString("Telephone"));
+                customer.setEmail(rs.getString("EmailAddress"));
+                customer.setDateOfMembership(rs.getString("DateOfMembership"));
+                customer.setGetDateOfMembershipExp(rs.getString("MembershipExpiryDate"));
 
-                customer.getAddress().setStreet(secondResult.getString("Street"));
-                customer.getAddress().setCity(secondResult.getString("Town"));
-                customer.getAddress().setParish(secondResult.getString("Parish"));
+                customer.getAddress().setStreet(rs2.getString("Street"));
+                customer.getAddress().setCity(rs2.getString("Town"));
+                customer.getAddress().setParish(rs2.getString("Parish"));
 
                 customerList.add(customer);
                 customer = new Customer();
Index: Project/Jans-Wholesale-RMS-Server/.idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_17\" default=\"true\" project-jdk-name=\"17\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Project/Jans-Wholesale-RMS-Server/.idea/misc.xml b/Project/Jans-Wholesale-RMS-Server/.idea/misc.xml
--- a/Project/Jans-Wholesale-RMS-Server/.idea/misc.xml	(revision 3312c5e66f2aaa8298f3b926ae0c58cdfb78c177)
+++ b/Project/Jans-Wholesale-RMS-Server/.idea/misc.xml	(date 1668392725068)
@@ -3,4 +3,7 @@
   <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="17" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
+  <component name="ProjectType">
+    <option name="id" value="jpab" />
+  </component>
 </project>
\ No newline at end of file
